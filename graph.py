import networkx as nx
import matplotlib.pyplot as plt
from huffman import HuffmanEncoder

def build_huffman_graph(node, G, pos={}, x=0, y=0, layer=1):
    """
    This code builds a networkx graph from the tree generated by a
    HuffmanEncoder (see huffman.py). I used ChatGPT to generate this code.
    """

    if node is None:
        return

    # Add the current node to the graph with its character and frequency
    G.add_node((node.char, node.freq), label=f"{node.char}:{node.freq}")
    pos[(node.char, node.freq)] = (x, y)

    # If there is a left child, add an edge with label '0' and position it to the left
    if node.left:
        G.add_edge((node.char, node.freq), (node.left.char, node.left.freq), label='0')
        build_huffman_graph(node.left, G, pos, x - 1 / layer, y - 1, layer + 1)

    # If there is a right child, add an edge with label '1' and position it to the right
    if node.right:
        G.add_edge((node.char, node.freq), (node.right.char, node.right.freq), label='1')
        build_huffman_graph(node.right, G, pos, x + 1 / layer, y - 1, layer + 1)

def draw_huffman_tree(root):
    # Initialize a directed graph
    G = nx.DiGraph()
    pos = {}

    # Build the graph starting from the root of the Huffman tree
    build_huffman_graph(root, G, pos)

    # Draw the nodes and edges with labels
    labels = nx.get_node_attributes(G, 'label')
    edge_labels = nx.get_edge_attributes(G, 'label')

    plt.figure(figsize=(10, 8))
    nx.draw(G, pos, labels=labels, with_labels=True, node_size=3000, node_color="skyblue", font_size=10, font_weight="bold")
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color="red", font_size=12)

    plt.title("Huffman Tree")
    plt.show()


if __name__ == '__main__':

    # borrow test case
    from test_huffman import freq1
    encoder = HuffmanEncoder(freq1)
    draw_huffman_tree(encoder.root)
